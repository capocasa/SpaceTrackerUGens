class:: RecordBufT
summary:: Record to SpaceTracker format
related:: PlayBufT
categories::  UGens>Buffer

Description::

Record to SpaceTracker-formatted buffer. See PlayBufT for discussion.

classmethods::

method:: ar
method:: kr


argument::inputArray

An array of inputs that contain stepped streams of control data to be recorded.

When the first input changes, all inputs are recorded for one frame. Intermittent input changes on other channels are ignored.

argument::bufnum

The buffer to record to. Buffer numChannels must be one greater than the channels to record, because the first channel of the buffer is used to store the time the corresponding values are to be held.

argument::run

Recording gate. Non-zero records, zero pauses recording. This may be modulated.

argument::doneAction

doneAction to execute when done recording.

examples::


MIDIIn.connectAll;
s.boot;


// Record MIDI notes to SpaceTracker from stepped control rate signal 
b=Buffer.alloc(s, 768, 3);
(
  x={
    arg note, velocity;
    RecordBufT.kr([note, velocity].poll, b); // returns frames recorded
    Saw.ar(note.midicps, (velocity/128).lag);
  }.play;
  MIDIFunc.noteOn({|velocity,note|
    x.set(1, note, 2, velocity);
  });
  MIDIFunc.noteOff({|velocity,note|
    x.set(1, 0, 2, 0);
  });
)
// Observe data, adapt to frames recorded
b.getn(0,36, {|v|v.postln});

//Play back recorded data
(
  {
    var note, velocity;
    #note, velocity = PlayBufT.ar(2, b);
    Saw.ar(note.midicps, (velocity/128).lag);
  }.play;
)


// Record 2 note polyphonic MIDI notes to SpaceTracker from stepped audio rate signal
// (example requires JackAudioUGens for hi-res MIDI)
b=2.collect{Buffer.alloc(s, 768, 3)};
(
  {
    var in=JackMIDIIn.ar(2,nil,nil,false);

    // recordbuf gets multichannel expanded
    // returns recorded frames as array
    RecordBufT.ar(in, b);

    in.collect {|c|
      var note, velocity;
      #note, velocity = c;
      Saw.ar(note.midicps, (velocity/128).lag)
    }.sum;
  }.play;
)
// Observe data, adapt to frames recorded
b[0].getn(0,36, {|v|v.postln});
b[1].getn(0,36, {|v|v.postln});

//Play back recorded data
( 
  {
    PlayBufT.ar(2, b).collect {|c|
      var note, velocity;
      #note, velocity = c;
      Saw.ar(note.midicps, (velocity/128).lag);
    }.sum;
  }.play;
)

