class:: PlayBufT
summary:: Playback buffer data in timed buffer format, resulting in a stepped signal 
related:: RecordBufT
categories::  UGens>Buffer

Description::

Timed buffer format contains in the first channel the number of seconds the values in the other channels are to be held. PlayBufT plays back that kind of data, which results in a stepped stream- a mostly consistent stream of data with instant changes.

classmethods::

method:: ar
method:: kr

argument::numChannels
Number of channels, excluding the time channel.

argument::bufnum
The buffer containing the timed data to play back
::

argument::rate
The speed at which to play back the data. 1.0 is normal playback, 2.0 is double speed, 0.5 is half speed. Backwards playback is currently not supported.

argument::trigger

Jump to startPos when input changes from zero or a negative value to a positive one

argument::startPos

The time to jump to on trigger in seconds

argument:: doneAction
doneAction to execute when playback is complete. See link::Reference/UGen-doneActions:: 

Note: not recommended to use doneAction with multichannel expansion because buffers with timed data commonly have a different length

examples::

// Play some notes
b=Buffer.sendCollection(s, [0.25,60,0.25,62,0.25,64,0.25,65,0.25,67,0.25,65,0.25,64,0.25,62,0.5,60], 2);
(
{
  // playback numChannels is one less than of buffer
  var note = PlayBufT.kr(1,b);
  SinOsc.ar(note.midicps,0,(note>0).lag);
}.play;
)

// With velocity 
b=Buffer.sendCollection(s, [0.25,60,32,0.25,62,48,0.25,64,64,0.25,65,80,0.25,67,96,0.25,65,80,0.25,64,64,0
.25,62,48,0.5,60,36], 3);
(
{
  var note, velocity;
  #note, velocity = PlayBufT.kr(2,b);
  SinOsc.ar(note.midicps,0,(velocity/128).lag);
}.play;
)

// With velocity and timbre
b=Buffer.sendCollection(s, [0.25,60,32,60,0.25,62,48,8,0.25,64,64,127,0.25,65,80,56,0.25,67,96,39,0.25,65,
80,37,0.25,64,64,23,0.25,62,48,79,0.5,60,36,45], 4);
(
{
  var note, velocity, timbre;
  #note, velocity, timbre = PlayBufT.kr(3,b);
  RLPF.ar(Saw.ar(note.midicps,(velocity/128).lag),(timbre/128*4500).lag,0.25);
}.play;
)

discussion::

Timed buffer format is sparse, which means that it saves the values in a stream of data only once, even if it is repeated many times. For this type of data, storing it timed drastically reduces the memory required to play it back and store it without losses. Arguably, for audio rate, the difference is great enough to make heavy use of audio rate for control signals feasable for the first time. Using audio rate for musical instrument data vastly improves the feel of any percussive performance, which includes the piano, perhaps bringing it up to par with acoustic instruments on low latency systems.


